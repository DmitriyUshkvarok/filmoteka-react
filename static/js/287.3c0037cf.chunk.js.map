{"version":3,"file":"static/js/287.3c0037cf.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesItem/MoviesItem.styled.js","components/MoviesItem/MoviesItem.jsx","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/pages/MoviesPage/MoviePage.module.css?dc7a","components/Searchbar/Searchbar.styled.js","components/Searchbar/Searchbar.jsx","webpack://react-homework-template/./src/components/MoviesBar/MoviesBar.module.css?9446","components/SearchByYear/SearchByYear.styled.js","components/SearchByYear/SearchByYear.jsx","components/MoviesBar/MoviesBar.jsx","pages/MoviesPage/MoviePage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"MoviesList_moviesList__P6SP5\",\"moviesItem\":\"MoviesList_moviesItem__r+0sq\"};","import styled, { css } from 'styled-components';\n\nexport const CardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n`;\n\nexport const ImgWrapper = styled.div`\n  overflow: hidden;\n  margin-bottom: 5px;\n`;\n\nexport const MoviesImg = styled.img`\n  max-width: 100%;\n  object-fit: cover;\n  transition: transform 0.4s;\n  -webkit-transition: transform 0.4s;\n  -moz-transition: transform 0.4s;\n  -ms-transition: transform 0.4s;\n  -o-transition: transform 0.4s;\n\n  &:hover {\n    transform: scale(1.1);\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    -o-transform: scale(1.1);\n  }\n`;\n\nexport const CardTitle = styled.h3`\n  max-width: 300px;\n  color: var(--color);\n  font-size: 14px;\n  margin-bottom: 0;\n  margin-top: auto;\n`;\n\nexport const RatingStarsContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const GoldStar = styled.span`\n  font-size: 10px;\n  color: gold;\n`;\n\nexport const GrayStar = styled.span`\n  font-size: 10px;\n  color: gray;\n`;\n\nexport const RatingText = styled.p`\n  color: rgb(36, 35, 35);\n  font-size: 10px;\n`;\n\nexport const RatingNumber = styled.span`\n  font-size: 8px;\n`;\n\nexport const MoviesYear = styled.p`\n  color: red;\n  font-weight: bold;\n  font-size: 12px;\n  margin-left: auto;\n`;\n\n/* Задаем разные цвета для рейтингов */\nexport const red = css`\n  background: #f85032;\n  background: -webkit-linear-gradient(to right, #e73827, #f85032);\n  background: linear-gradient(to right, #e73827, #f85032);\n`;\n\nexport const yellow = css`\n  background: #f7971e;\n  background: -webkit-linear-gradient(to right, #ffd200, #f7971e);\n  background: linear-gradient(to right, #ffd200, #f7971e);\n  color: rgb(36, 35, 35);\n`;\n\nexport const green = css`\n  background: #000000;\n  background: -webkit-linear-gradient(to right, #0f9b0f, #000000);\n  background: linear-gradient(to right, #0f9b0f, #000000);\n  color: #fff;\n`;\n\nexport const RatingBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  width: 10px;\n  height: 10px;\n  padding: 5px;\n  font-weight: bold;\n  margin-left: 10px;\n\n  // добавляем стили для класса rating-red\n  &.rating-red {\n    ${red}\n  }\n\n  // добавляем стили для класса rating-yellow\n  &.rating-yellow {\n    ${yellow}\n  }\n\n  // добавляем стили для класса rating-green\n  &.rating-green {\n    ${green}\n  }\n`;\n","import {\n  CardWrapper,\n  ImgWrapper,\n  MoviesImg,\n  CardTitle,\n  RatingStarsContainer,\n  GoldStar,\n  GrayStar,\n  RatingText,\n  RatingNumber,\n  RatingBlock,\n  MoviesYear,\n} from './MoviesItem.styled';\n\nfunction MoviesItem({ poster_path, title, vote_average, release_date }) {\n  const percentRating = vote_average * 10; // convert 0-10 rating to percentage\n  const goldStars = Math.floor(percentRating / 10); // number of gold stars\n  // eslint-disable-next-line no-unused-vars\n  const grayStars = 10 - goldStars; // number of gray stars\n\n  // create an array of stars with the appropriate color\n  const ratingStars = Array.from({ length: 10 }, (_, i) => {\n    if (i < goldStars) {\n      return <GoldStar key={`star-${i}`}>&#9733;</GoldStar>;\n    } else {\n      return <GrayStar key={`star-${i}`}>&#9733;</GrayStar>;\n    }\n  });\n\n  const getRatingColor = vote_average => {\n    if (vote_average <= 4) {\n      return 'red';\n    } else if (vote_average < 7) {\n      return 'yellow';\n    } else {\n      return 'green';\n    }\n  };\n\n  const ratingColor = getRatingColor(vote_average);\n  const ratingClassName = `rating-${ratingColor}`;\n\n  return (\n    <>\n      <CardWrapper>\n        <ImgWrapper>\n          <MoviesImg\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                : 'https://dummyimage.com/300x450/fff/aaa'\n            }\n            alt={title}\n            width={300}\n          />\n        </ImgWrapper>\n        <CardTitle>{title ? title : 'Movie without a title'}</CardTitle>\n        <RatingStarsContainer>\n          <RatingText>{vote_average ? ratingStars : 'N/A'}</RatingText>\n          <RatingBlock className={ratingClassName}>\n            <RatingNumber>\n              {vote_average ? vote_average.toFixed(1) : 'N/A'}\n            </RatingNumber>\n          </RatingBlock>\n          <MoviesYear>\n            {release_date ? release_date.slice(0, 4) : 'N/A'}\n          </MoviesYear>\n        </RatingStarsContainer>\n      </CardWrapper>\n    </>\n  );\n}\n\nexport default MoviesItem;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './MoviesList.module.css';\nimport MoviesItem from 'components/MoviesItem/MoviesItem';\n\nfunction MoviesList({ movies }) {\n  const location = useLocation();\n  return (\n    <ul className={css.moviesList}>\n      {movies.map(\n        ({ id, poster_path, title, vote_average, release_date }, index) => (\n          <li key={`${id}-${index}`} className={css.moviesItem}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <MoviesItem\n                key={id}\n                id={id}\n                poster_path={poster_path}\n                title={title}\n                vote_average={vote_average}\n                release_date={release_date}\n              />\n            </Link>\n          </li>\n        )\n      )}\n    </ul>\n  );\n}\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string,\n      vote_average: PropTypes.number,\n      release_date: PropTypes.string,\n    })\n  ).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"MoviePage_searchbar__Hfnpz\"};","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  margin-top: 190px;\n  margin-bottom: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  @media screen and (max-width: 705px) {\n    margin-top: 230px;\n  }\n\n  @media screen and (max-width: 380px) {\n    margin-top: 260px;\n  }\n`;\n\nexport const InputSearch = styled.input`\n  box-sizing: border-box;\n  width: 400px;\n  height: 50px;\n  margin-right: 10px;\n  background-color: transparent;\n  border: 1px solid gray;\n  outline: none;\n  color: var(--color);\n  font-size: 18px;\n  border-radius: 5px;\n  -webkit-border-radius: 5px;\n  -moz-border-radius: 5px;\n  -ms-border-radius: 5px;\n  -o-border-radius: 5px;\n  padding: 10px;\n\n  &:focus {\n    border: 1px solid var(--border-color);\n  }\n\n  &::placeholder {\n    color: var(--color);\n    opacity: 0.3;\n  }\n`;\n\nexport const SerchBtn = styled.button`\n  width: 100px;\n  height: 50px;\n  background: var(--background-header);\n  border: var(--border-color);\n  color: var(--color);\n  border-radius: 5px;\n  -webkit-border-radius: 5px;\n  -moz-border-radius: 5px;\n  -ms-border-radius: 5px;\n  -o-border-radius: 5px;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background: var(--background-body);\n  }\n`;\n","import { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\nimport { Form, InputSearch, SerchBtn } from './Searchbar.styled';\nimport { useState } from 'react';\n\nfunction Searchbar({ onSubmit }) {\n  const [query, setQuery] = useState('');\n\n  const handleQueryChange = e => {\n    setQuery(e.currentTarget.value.toLowerCase().trim());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!query) {\n      toast.error('Please, enter your name movie!');\n      return;\n    }\n\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <InputSearch\n        name=\"query\"\n        value={query}\n        type=\"text\"\n        autoComplete=\"off\"\n        placeholder=\"Enter the movie name\"\n        onChange={handleQueryChange}\n      />\n      <SerchBtn>Search</SerchBtn>\n    </Form>\n  );\n}\n\nexport default Searchbar;\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"movieBarList\":\"MoviesBar_movieBarList__OTYcq\",\"movieBarListItem\":\"MoviesBar_movieBarListItem__e8kT6\"};","import styled from 'styled-components';\nimport Select from 'react-select';\nimport { FaReact } from 'react-icons/fa';\n\nexport const CardsLoader = styled(FaReact)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  fill: var(--color);\n  margin-left: auto;\n  margin-right: auto;\n  animation: rotate 5s infinite linear;\n  -webkit-animation: rotate 5s infinite linear;\n  @keyframes rotate {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nexport const SelectWrapper = styled.div`\n  width: 300px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const SelectedYear = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 20px;\n`;\n\nexport const SelectLabel = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  font-size: 1.1rem;\n  color: var(--color);\n`;\n\nexport const StyleSelect = styled(Select)`\n  width: 200px;\n`;\n\nexport const SearchText = styled.p`\n  color: var(--color);\n  max-width: 290px;\n  margin-left: auto;\n  margin-right: auto;\n  font-size: 14px;\n  text-transform: uppercase;\n  text-align: center;\n  font-weight: bold;\n`;\n","import { useState, useEffect, useContext } from 'react';\nimport {\n  CardsLoader,\n  SelectWrapper,\n  SelectedYear,\n  SelectLabel,\n  SearchText,\n  StyleSelect,\n} from './SearchByYear.styled';\nimport apiTheMovieDB from 'service/kino-api';\nimport { toast } from 'react-toastify';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport ButtonLoadMore from 'components/ButtonLoadMore/ButtonLoadMore';\nimport Container from 'components/Container/Container';\nimport { animateScroll as scroll } from 'react-scroll';\nimport { LanguageContext } from 'components/context/languageContext';\n\nfunction SearchByYears() {\n  const [selectedYear, setSelectedYear] = useState(0);\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(1);\n  const [showButton, setShowButton] = useState(false);\n  const { selectedLanguage } = useContext(LanguageContext);\n\n  useEffect(() => {\n    if (selectedYear !== 0) {\n      const fetchMovies = async () => {\n        setLoading(true);\n        try {\n          const newMovies = await apiTheMovieDB.fetchByYear(\n            page,\n            selectedYear,\n            selectedLanguage.iso_639_1\n          );\n          if (newMovies.length === 0) {\n            setShowButton(false);\n            if (page === 1) {\n              setMovies([]);\n              toast.error(\"Sorry, we couldn't find any movies for that year.\");\n            } else {\n              toast.error(\"That's all the movies we could find for that year.\");\n            }\n          } else {\n            setShowButton(true);\n            setMovies(prevMovies => [...prevMovies, ...newMovies]);\n          }\n        } catch (error) {\n          setError(error);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      fetchMovies();\n    }\n  }, [page, selectedLanguage, selectedYear]);\n\n  if (error) {\n    return <p>{error.message}</p>;\n  }\n\n  const yearOptions = [];\n  const currentYear = new Date().getFullYear();\n  for (let year = currentYear; year >= currentYear - 50; year--) {\n    yearOptions.push(year);\n  }\n\n  const hendleIncrement = () => {\n    setPage(page + 1);\n\n    scroll.scrollToBottom({\n      duration: 2000,\n      smooth: 'easeInOutQuad',\n      offset: 0.2,\n    });\n  };\n\n  return (\n    <>\n      <Container>\n        <SelectWrapper>\n          <SelectedYear>\n            <SelectLabel htmlFor=\"year-select\">Select a year:</SelectLabel>\n            <StyleSelect\n              classNamePrefix=\"react-select\"\n              name=\"year-select\"\n              id=\"year-select\"\n              value={{ value: selectedYear, label: selectedYear }}\n              onChange={selectedOption => setSelectedYear(selectedOption.value)}\n              options={yearOptions.map(year => ({\n                value: year,\n                label: year,\n              }))}\n              placeholder=\"Select a year\"\n              menuPlacement=\"auto\"\n            />\n          </SelectedYear>\n        </SelectWrapper>\n        {movies.length > 0 ? (\n          <MoviesList movies={movies} />\n        ) : loading ? (\n          <CardsLoader size={50} />\n        ) : (\n          <SearchText>Please select a year to see movies.</SearchText>\n        )}\n        {showButton && <ButtonLoadMore hendleIncrement={hendleIncrement} />}\n      </Container>\n    </>\n  );\n}\n\nexport default SearchByYears;\n","import css from './MoviesBar.module.css';\nimport { Link, useLocation } from 'react-router-dom';\nimport SearchByYears from 'components/SearchByYear/SearchByYear';\n\nfunction MoviesBar() {\n  const location = useLocation();\n\n  return (\n    <div className={css.movieBarWrapper}>\n      <ul className={css.movieBarList}>\n        <li className={css.movieBarListItem}>\n          <Link to={`/movie/actors/`} state={{ from: location }}>\n            Actors\n          </Link>\n        </li>\n        <li className={css.movieBarListItem}>\n          <Link to={`/movie/top-rated/`} state={{ from: location }}>\n            Top Rated\n          </Link>\n        </li>\n        <li className={css.movieBarListItem}>\n          <Link to={`/movie/expected-movies/`} state={{ from: location }}>\n            Expected Movies\n          </Link>\n        </li>\n      </ul>\n      <div>\n        <SearchByYears />\n      </div>\n    </div>\n  );\n}\nexport default MoviesBar;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport css from './MoviePage.module.css';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport Container from 'components/Container/Container';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport apiTheMovieDB from 'service/kino-api';\nimport { toast } from 'react-toastify';\nimport MoviesBar from 'components/MoviesBar/MoviesBar';\n\nconst MoviePage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState('');\n  const [currentPage, setCurrentPage] = useState(0);\n  const [hasMore, setHasMore] = useState(false);\n\n  const fetchMovies = useCallback(\n    page => {\n      setHasMore(true);\n      apiTheMovieDB\n        .fetchSearchMovie(query, page)\n        .then(newMovies => {\n          if (newMovies.length === 0) {\n            toast.error(\"sorry, that's all the movies we could find\");\n            setHasMore(false);\n          } else {\n            setMovies(prevMovies => [...prevMovies, ...newMovies]);\n            setCurrentPage(page);\n          }\n        })\n        .catch(error => {\n          toast.error('Failed to fetch movies.');\n        });\n    },\n    [query]\n  );\n\n  useEffect(() => {\n    setQuery(new URLSearchParams(location.search).get('query'));\n    setCurrentPage(1);\n  }, [location.search]);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    fetchMovies(1);\n  }, [fetchMovies, query]);\n\n  const handleFormSubmit = newQuery => {\n    if (newQuery === query) {\n      return;\n    }\n    setMovies([]);\n    navigate(`?query=${newQuery}`);\n  };\n\n  const handleLoadMore = () => {\n    fetchMovies(currentPage + 1);\n  };\n\n  return (\n    <>\n      <Container>\n        <section className={css.searchbar}>\n          <Searchbar onSubmit={handleFormSubmit} />\n          <MoviesBar />\n        </section>\n        <section className={css.moviesListSearch}>\n          {movies && (\n            <InfiniteScroll\n              dataLength={movies.length}\n              next={handleLoadMore}\n              hasMore={hasMore}\n              loader={<p>Loading...</p>}\n            >\n              <MoviesList movies={movies} />\n            </InfiniteScroll>\n          )}\n        </section>\n      </Container>\n    </>\n  );\n};\n\nexport default MoviePage;\n"],"names":["CardWrapper","styled","ImgWrapper","MoviesImg","CardTitle","RatingStarsContainer","GoldStar","GrayStar","RatingText","RatingNumber","MoviesYear","red","css","yellow","green","RatingBlock","poster_path","title","vote_average","release_date","percentRating","goldStars","Math","floor","ratingStars","Array","from","length","_","i","ratingColor","getRatingColor","ratingClassName","src","alt","width","className","toFixed","slice","movies","location","useLocation","map","index","id","to","state","Form","InputSearch","SerchBtn","onSubmit","useState","query","setQuery","e","preventDefault","toast","name","value","type","autoComplete","placeholder","onChange","currentTarget","toLowerCase","trim","CardsLoader","FaReact","SelectWrapper","SelectedYear","SelectLabel","StyleSelect","Select","SearchText","selectedYear","setSelectedYear","setMovies","error","setError","loading","setLoading","page","setPage","showButton","setShowButton","selectedLanguage","useContext","LanguageContext","useEffect","fetchMovies","apiTheMovieDB","iso_639_1","newMovies","prevMovies","message","yearOptions","currentYear","Date","getFullYear","year","push","Container","htmlFor","classNamePrefix","label","selectedOption","options","menuPlacement","MoviesList","size","ButtonLoadMore","hendleIncrement","scroll","duration","smooth","offset","SearchByYear","navigate","useNavigate","currentPage","setCurrentPage","hasMore","setHasMore","useCallback","then","catch","URLSearchParams","search","get","newQuery","dataLength","next","loader"],"sourceRoot":""}
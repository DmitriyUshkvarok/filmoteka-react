{"version":3,"file":"static/js/633.4774e8dd.chunk.js","mappings":"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","sources":["components/ActorsInfo/ActorsInfo.jsx","service/kino-api.js"],"sourcesContent":["import Container from 'components/Container/Container';\nimport { toast } from 'react-toastify';\nimport { useState, useEffect } from 'react';\nimport apiTheMovieDB from 'service/kino-api';\nimport { useParams } from 'react-router-dom';\n\nconst ActorsInfo = () => {\n  const { id } = useParams();\n  const [actorsInfo, setActorsInfo] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    apiTheMovieDB\n      .fetchActorInfoAndMovies(id)\n      .then(res => {\n        setActorsInfo(res);\n      })\n      .catch(error => {\n        setError(error);\n        toast.error('sorry, hernya kakasja');\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [id]);\n\n  if (error) {\n    return <p>{error.message}</p>;\n  }\n\n  return (\n    <Container>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div>\n          {actorsInfo && (\n            <div key={actorsInfo.id}>\n              <h3>{actorsInfo.name}</h3>\n              <div className=\"actorInfoMain\">\n                <img\n                  src={\n                    actorsInfo.profile_path\n                      ? `https://image.tmdb.org/t/p/w500/${actorsInfo.profile_path}`\n                      : 'https://via.placeholder.com/200x300'\n                  }\n                  alt={actorsInfo.name}\n                  width={200}\n                />\n                <p className=\"biography\">{actorsInfo.biography}</p>\n              </div>\n              <div className=\"actorsDetalis\">\n                <p>{actorsInfo.birthday}</p>\n                <p>{actorsInfo.known_for_department}</p>\n                <p>{actorsInfo.place_of_birth}</p>\n                <div>{actorsInfo.popularity}</div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </Container>\n  );\n};\n\nexport default ActorsInfo;\n","import axios from 'axios';\nconst URL = `https://api.themoviedb.org/3/`;\nconst key = 'f27eea818d2010463700365b0c06a16e';\n\nfunction fetchTrending(page = 1) {\n  return axios\n    .get(`${URL}trending/all/day?api_key=${key}&page=${page}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchSearchMovie(query, page = 1) {\n  return axios\n    .get(`${URL}search/movie?query=${query}&api_key=${key}&page=${page}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchMovieDetalis(id) {\n  return axios\n    .get(`${URL}movie/${id}?api_key=${key}`)\n    .then(response => response.data);\n}\n\nfunction fetchMovieCredits(id) {\n  return axios\n    .get(`${URL}movie/${id}/credits?api_key=${key}`)\n    .then(response => response.data);\n}\n\nfunction fetchMovieReview(id) {\n  return axios\n    .get(`${URL}movie/${id}/reviews?api_key=${key}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchTrailerMovies(movieId) {\n  return axios\n    .get(`${URL}movie/${movieId}/videos?api_key=${key}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchAllgenres() {\n  return axios\n    .get(`${URL}/genre/movie/list?api_key=${key}`)\n    .then(response => response.data.genres);\n}\n\nfunction fetchByGenre(id, page = 1) {\n  return axios\n    .get(`${URL}/discover/movie?api_key=${key}&with_genres=${id}&page=${page}`)\n    .then(response => response.data);\n}\n\nfunction fetchActors(page = 1, query = '') {\n  const url = query\n    ? `${URL}search/person?api_key=${key}&page=${page}&query=${query}`\n    : `${URL}person/popular?api_key=${key}&page=${page}`;\n  return axios.get(url).then(response => response.data);\n}\n\nfunction fetchMoviesbyActors(id, page = 1) {\n  return axios\n    .get(`${URL}person/${id}/movie_credits?api_key=${key}&page=${page}`)\n    .then(response => response.data.cast);\n}\n\nfunction fetchActorInfoAndMovies(id) {\n  return axios\n    .get(`${URL}person/${id}?api_key=${key}`)\n    .then(response => response.data);\n}\n\nfunction fetchByYear(page = 1, selectedYear) {\n  return axios\n    .get(\n      `${URL}discover/movie?api_key=${key}&sort_by=popularity.desc&page=${page}&primary_release_year=${selectedYear}`\n    )\n    .then(response => response.data.results);\n}\n\nfunction fetchExpectedMovies() {\n  return axios\n    .get(`${URL}/movie/upcoming?api_key=${key}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchFilmsByRating(currentPage = 1) {\n  return axios\n    .get(`${URL}/movie/top_rated?api_key=${key}&page=${currentPage}`)\n    .then(response => response.data);\n}\n\nfunction fetchWaitingForTheMovies(currentPage = 1) {\n  return axios\n    .get(\n      `${URL}/movie/upcoming?api_key=${key}&primary_release_date.gte=${new Date()\n        .toISOString()\n        .slice(0, 10)}&page=${currentPage}`\n    )\n    .then(response => response.data);\n}\n\nconst apiTheMovieDB = {\n  fetchMoviesbyActors,\n  fetchActorInfoAndMovies,\n  fetchTrending,\n  fetchSearchMovie,\n  fetchMovieDetalis,\n  fetchMovieCredits,\n  fetchMovieReview,\n  fetchTrailerMovies,\n  fetchAllgenres,\n  fetchByGenre,\n  fetchActors,\n  fetchByYear,\n  fetchExpectedMovies,\n  fetchFilmsByRating,\n  fetchWaitingForTheMovies,\n};\n\nexport default apiTheMovieDB;\n"],"names":["id","useParams","useState","actorsInfo","setActorsInfo","loading","setLoading","error","setError","useEffect","apiTheMovieDB","then","res","catch","toast","finally","message","name","className","src","profile_path","alt","width","biography","birthday","known_for_department","place_of_birth","popularity","URL","key","fetchMoviesbyActors","page","axios","response","data","cast","fetchActorInfoAndMovies","fetchTrending","results","fetchSearchMovie","query","fetchMovieDetalis","fetchMovieCredits","fetchMovieReview","fetchTrailerMovies","movieId","fetchAllgenres","genres","fetchByGenre","fetchActors","url","fetchByYear","selectedYear","fetchExpectedMovies","fetchFilmsByRating","currentPage","fetchWaitingForTheMovies","Date","toISOString","slice"],"sourceRoot":""}
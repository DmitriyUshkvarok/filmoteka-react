{"version":3,"file":"static/js/829.46b93397.chunk.js","mappings":"2NACA,EAA6B,+BAA7B,EAAyE,+B,mBCC5DA,EAAcC,EAAAA,GAAAA,IAAH,yHAOXC,EAAaD,EAAAA,GAAAA,IAAH,oEAKVE,EAAYF,EAAAA,GAAAA,IAAH,qaAkBTG,EAAYH,EAAAA,GAAAA,GAAH,mIAQTI,EAAuBJ,EAAAA,GAAAA,IAAH,kEAKpBK,EAAWL,EAAAA,GAAAA,KAAH,4DAKRM,EAAWN,EAAAA,GAAAA,KAAH,4DAKRO,EAAaP,EAAAA,GAAAA,EAAH,uEAKVQ,EAAeR,EAAAA,GAAAA,KAAH,2CAIZS,EAAaT,EAAAA,GAAAA,EAAH,uGAQVU,GAAMC,EAAAA,EAAAA,IAAH,gLAMHC,GAASD,EAAAA,EAAAA,IAAH,2MAONE,GAAQF,EAAAA,EAAAA,IAAH,gMAOLG,EAAcd,EAAAA,GAAAA,IAAH,+xBAalBU,EAKAE,EAKAC,G,SC1CN,MA3DA,YAAyE,IAAnDE,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,aAChDC,EAA+B,GAAfF,EAChBG,EAAYC,KAAKC,MAAMH,EAAgB,IAKvCI,EAAcC,MAAMC,KAAK,CAAEC,OAAQ,KAAM,SAACC,EAAGC,GACjD,OAAIA,EAAIR,GACC,SAACf,EAAD,mCAAuBuB,KAEvB,SAACtB,EAAD,mCAAuBsB,GAEjC,IAYKC,EAViB,SAAAZ,GACrB,OAAIA,GAAgB,EACX,MACEA,EAAe,EACjB,SAEA,OAEV,CAEmBa,CAAeb,GAC7Bc,EAAe,iBAAaF,GAElC,OACE,+BACE,UAAC9B,EAAD,YACE,SAACE,EAAD,WACE,SAACC,EAAD,CACE8B,IACEjB,EAAW,0CAC4BA,GACnC,sCAENkB,IAAKjB,EACLkB,MAAO,SAGX,SAAC/B,EAAD,UAAYa,GAAgB,2BAC5B,UAACZ,EAAD,YACE,SAACG,EAAD,UAAaU,EAAeM,EAAc,SAC1C,SAACT,EAAD,CAAaqB,UAAWJ,EAAxB,UACE,SAACvB,EAAD,UACGS,EAAeA,EAAamB,QAAQ,GAAK,WAG9C,SAAC3B,EAAD,UACGS,EAAeA,EAAamB,MAAM,EAAG,GAAK,eAMtD,EC3CD,MAvBA,YAAiC,IAAXC,EAAU,EAAVA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,eAAIL,UAAWxB,EAAf,SACG2B,EAAOG,KACN,WAAyDC,GAAzD,IAAGC,EAAH,EAAGA,GAAI5B,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,aAAcC,EAAzC,EAAyCA,aAAzC,OACE,eAA2BiB,UAAWxB,EAAtC,UACE,SAAC,KAAD,CAAMiC,GAAE,kBAAaD,GAAME,MAAO,CAAEpB,KAAMc,GAA1C,UACE,SAAC,EAAD,CAEEI,GAAIA,EACJ5B,YAAaA,EACbC,MAAOA,EACPC,aAAcA,EACdC,aAAcA,GALTyB,MAHX,UAAYA,EAAZ,YAAkBD,GADpB,KAiBP,C,6FC1BD,EAAiC,iC,gFCAjC,EAA4B,6BAA5B,EAAyE,iC,SCkBzE,I,kCAAA,EAfA,YAAgC,IAAXI,EAAU,EAAVA,OACbP,GAAWC,EAAAA,EAAAA,MAEjB,OACE,eAAIL,UAAWxB,EAAf,SACGmC,EAAOL,KAAI,gBAAGE,EAAH,EAAGA,GAAII,EAAP,EAAOA,KAAP,OACV,SAAC,KAAD,CAAMH,GAAE,gBAAWD,GAAME,MAAO,CAAEpB,KAAMc,GAAxC,UACE,eAAIJ,UAAWxB,EAAf,UACE,uBAAIoC,OAFiDJ,EAD/C,KASjB,E,4ECbYK,GAAchD,EAAAA,EAAAA,IAAOiD,EAAAA,IAAPjD,CAAH,8XAmBXkD,EAAkBlD,EAAAA,GAAAA,IAAH,uPAefmD,EAAmBnD,EAAAA,GAAAA,IAAH,opBAiChBoD,GAAoBpD,EAAAA,EAAAA,IAAOqD,EAAAA,GAAPrD,CAAH,iPAWjBsD,EAAmBtD,EAAAA,GAAAA,IAAH,0HAOhBuD,EAAqBvD,EAAAA,GAAAA,IAAH,6CAIlBwD,EAAcxD,EAAAA,GAAAA,IAAH,8bAmBXyD,EAAwBzD,EAAAA,GAAAA,IAAH,2GAOrB0D,EAAgB1D,EAAAA,GAAAA,EAAH,+JASb2D,EAAsB3D,EAAAA,GAAAA,IAAH,qGAMnB4D,GAA0B5D,EAAAA,EAAAA,IAAO6D,EAAAA,IAAP7D,CAAH,gDAGvB8D,GAA2B9D,EAAAA,EAAAA,IAAO+D,EAAAA,IAAP/D,CAAH,gDAKxBU,GAAMC,EAAAA,EAAAA,IAAH,gLAMHC,IAASD,EAAAA,EAAAA,IAAH,2MAONE,IAAQF,EAAAA,EAAAA,IAAH,gMAOLqD,GAAiBhE,EAAAA,GAAAA,EAAH,4xBAarBU,EAKAE,GAKAC,IAIOoD,GAAejE,EAAAA,GAAAA,EAAH,6DCpCzB,GAhI2B,WACzB,OAA4BkE,EAAAA,EAAAA,UAAS,IAArC,eAAO5B,EAAP,KAAe6B,EAAf,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KACMhC,GAAWC,EAAAA,EAAAA,MAejB,OAbAgC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,sBAEGC,MAAK,SAAAC,GACJR,EAAUQ,EACX,IACAC,OAAM,SAAAR,GACLC,EAASD,GACTS,EAAAA,GAAAA,MAAY,wBACb,IACAC,QAAQP,GAAW,GACvB,GAAE,IAECH,GACK,uBAAIA,EAAMW,WAIjB,+BACE,SAACC,EAAA,EAAD,UACGV,GACC,SAACtB,EAAD,CAAaiC,KAAM,GAAIC,MAAM,UAE7B,+BACE,SAAChC,EAAD,WACE,UAAC,KAAD,CACEiC,QAAS,CAACC,EAAAA,GAAYC,EAAAA,IACtBC,WAAY,CACVC,OAAQ,sBACRC,OAAQ,uBAEVC,UAAW,CAAEC,WAAW,GACxBC,YAAa,CACX,IAAK,CACHC,cAAe,GAEjB,IAAK,CACHA,cAAe,EACfC,aAAc,IAEhB,IAAK,CACHD,cAAe,EACfC,aAAc,IAEhB,IAAK,CACHD,cAAe,EACfC,aAAc,IAEhB,IAAM,CACJD,cAAe,EACfC,aAAc,IAEhB,KAAM,CACJD,cAAe,EACfC,aAAc,KA7BpB,UAiCGvD,EAAOG,KACN,YAA6D,IAA1D1B,EAAyD,EAAzDA,YAAaC,EAA4C,EAA5CA,MAAO2B,EAAqC,EAArCA,GAAI1B,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAWjCa,EAAe,iBATfd,GAAgB,EACX,MACEA,EAAe,EACjB,SAEA,SAKX,OACE,SAACmC,EAAD,WACE,UAACE,EAAD,YACE,SAACC,EAAD,WACE,SAAC,KAAD,CACEX,GAAE,kBAAaD,GACfE,MAAO,CAAEpB,KAAMc,GAFjB,UAIE,SAACiB,EAAD,CACExB,IACEjB,EAAW,0CAC4BA,GACnC,sCAENkB,IAAKjB,SAIX,UAACyC,EAAD,YACE,SAACC,EAAD,UACG1C,GAAgB,2BAEnB,UAAC2C,EAAD,YACE,SAACK,GAAD,CAAgB7B,UAAWJ,EAA3B,SACGd,EAAeA,EAAamB,QAAQ,GAAK,SAE5C,SAAC6B,GAAD,UACG/C,EAAamB,MAAM,EAAG,eA1BTM,EAiC3B,KAEH,SAACQ,EAAD,CAAkBhB,UAAU,qBAA5B,UACE,SAACyB,EAAD,OAEF,SAACT,EAAD,CAAkBhB,UAAU,qBAA5B,UACE,SAAC2B,EAAD,gBASjB,EC9ED,OAhEA,WACE,OAA4BI,EAAAA,EAAAA,UAAS,IAArC,eAAO5B,EAAP,KAAe6B,EAAf,KACA,GAAsCD,EAAAA,EAAAA,UAAS,GAA/C,eAAO4B,EAAP,KAAoBC,EAApB,KACA,GAAoC7B,EAAAA,EAAAA,WAAS,GAA7C,eAAO8B,EAAP,KAAmBC,EAAnB,KACA,GAA4B/B,EAAAA,EAAAA,UAAS,IAArC,eAAOpB,EAAP,KAAeoD,EAAf,KACA,GAA8BhC,EAAAA,EAAAA,WAAS,GAAvC,eAAOiC,EAAP,KAAgBC,EAAhB,KAEMC,GAAcC,EAAAA,EAAAA,cAAY,SAAAC,GAC9BN,GAAc,GAEdxB,EAAAA,EAAAA,cACiB8B,GACd7B,MAAK,SAAAC,GACJsB,GAAc,GACW,IAArBtB,EAAUjD,QACZmD,EAAAA,GAAAA,MAAY,8CAGdV,GAAU,SAAAqC,GAAU,wBAAQA,IAAR,OAAuB7B,GAAvB,IACpBoB,EAAeQ,EAChB,IACA3B,OAAM,SAAAR,GACL6B,GAAc,EACf,GACJ,GAAE,IAsBH,OApBAzB,EAAAA,EAAAA,YAAU,WAER,OADA4B,GAAW,GACJ,kBAAMA,GAAW,EAAjB,CACR,GAAE,KAEH5B,EAAAA,EAAAA,YAAU,WACJ2B,GAA6B,IAAlB7D,EAAOZ,QACpB2E,EAAYP,EAEf,GAAE,CAACA,EAAaO,EAAa/D,EAAOZ,OAAQyE,KAE7C3B,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,iBAEGC,MAAK,SAAA+B,GACJP,EAAUO,EACX,IACA7B,MAAM,QACV,GAAE,KAGD,UAACI,EAAA,EAAD,YACE,SAAC,GAAD,KACA,SAAC,EAAD,CAAWlC,OAAQA,KACnB,oBAASX,UAAWxB,EAApB,UACE,SAAC,IAAD,CACE+F,WAAYpE,EAAOZ,OACnBiF,KAAM,kBAAMN,EAAYP,EAAc,EAAhC,EACNc,SAAUZ,EACVa,QAAQ,sCAJV,UAME,SAACC,EAAA,EAAD,CAAYxE,OAAQA,UAK7B,C","sources":["webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesItem/MoviesItem.styled.js","components/MoviesItem/MoviesItem.jsx","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/pages/HomePage/HomePage.module.css?5baa","webpack://react-homework-template/./src/components/GanreList/GanreList.module.css?562b","components/GanreList/GanreList.jsx","components/ExpectedMoviesList/ExpectedMoviesList.styled.js","components/ExpectedMoviesList/ExpectedMoviesList.jsx","pages/HomePage/HomePage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"MoviesList_moviesList__P6SP5\",\"moviesItem\":\"MoviesList_moviesItem__r+0sq\"};","import styled, { css } from 'styled-components';\n\nexport const CardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n`;\n\nexport const ImgWrapper = styled.div`\n  overflow: hidden;\n  margin-bottom: 5px;\n`;\n\nexport const MoviesImg = styled.img`\n  max-width: 100%;\n  object-fit: cover;\n  transition: transform 0.4s;\n  -webkit-transition: transform 0.4s;\n  -moz-transition: transform 0.4s;\n  -ms-transition: transform 0.4s;\n  -o-transition: transform 0.4s;\n\n  &:hover {\n    transform: scale(1.1);\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    -o-transform: scale(1.1);\n  }\n`;\n\nexport const CardTitle = styled.h3`\n  max-width: 300px;\n  color: var(--color);\n  font-size: 14px;\n  margin-bottom: 0;\n  margin-top: auto;\n`;\n\nexport const RatingStarsContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const GoldStar = styled.span`\n  font-size: 10px;\n  color: gold;\n`;\n\nexport const GrayStar = styled.span`\n  font-size: 10px;\n  color: gray;\n`;\n\nexport const RatingText = styled.p`\n  color: rgb(36, 35, 35);\n  font-size: 10px;\n`;\n\nexport const RatingNumber = styled.span`\n  font-size: 8px;\n`;\n\nexport const MoviesYear = styled.p`\n  color: red;\n  font-weight: bold;\n  font-size: 12px;\n  margin-left: auto;\n`;\n\n/* Задаем разные цвета для рейтингов */\nexport const red = css`\n  background: #f85032;\n  background: -webkit-linear-gradient(to right, #e73827, #f85032);\n  background: linear-gradient(to right, #e73827, #f85032);\n`;\n\nexport const yellow = css`\n  background: #f7971e;\n  background: -webkit-linear-gradient(to right, #ffd200, #f7971e);\n  background: linear-gradient(to right, #ffd200, #f7971e);\n  color: rgb(36, 35, 35);\n`;\n\nexport const green = css`\n  background: #000000;\n  background: -webkit-linear-gradient(to right, #0f9b0f, #000000);\n  background: linear-gradient(to right, #0f9b0f, #000000);\n  color: #fff;\n`;\n\nexport const RatingBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  width: 10px;\n  height: 10px;\n  padding: 5px;\n  font-weight: bold;\n  margin-left: 10px;\n\n  // добавляем стили для класса rating-red\n  &.rating-red {\n    ${red}\n  }\n\n  // добавляем стили для класса rating-yellow\n  &.rating-yellow {\n    ${yellow}\n  }\n\n  // добавляем стили для класса rating-green\n  &.rating-green {\n    ${green}\n  }\n`;\n","import {\n  CardWrapper,\n  ImgWrapper,\n  MoviesImg,\n  CardTitle,\n  RatingStarsContainer,\n  GoldStar,\n  GrayStar,\n  RatingText,\n  RatingNumber,\n  RatingBlock,\n  MoviesYear,\n} from './MoviesItem.styled';\n\nfunction MoviesItem({ poster_path, title, vote_average, release_date }) {\n  const percentRating = vote_average * 10; // convert 0-10 rating to percentage\n  const goldStars = Math.floor(percentRating / 10); // number of gold stars\n  // eslint-disable-next-line no-unused-vars\n  const grayStars = 10 - goldStars; // number of gray stars\n\n  // create an array of stars with the appropriate color\n  const ratingStars = Array.from({ length: 10 }, (_, i) => {\n    if (i < goldStars) {\n      return <GoldStar key={`star-${i}`}>&#9733;</GoldStar>;\n    } else {\n      return <GrayStar key={`star-${i}`}>&#9733;</GrayStar>;\n    }\n  });\n\n  const getRatingColor = vote_average => {\n    if (vote_average <= 4) {\n      return 'red';\n    } else if (vote_average < 7) {\n      return 'yellow';\n    } else {\n      return 'green';\n    }\n  };\n\n  const ratingColor = getRatingColor(vote_average);\n  const ratingClassName = `rating-${ratingColor}`;\n\n  return (\n    <>\n      <CardWrapper>\n        <ImgWrapper>\n          <MoviesImg\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                : 'https://via.placeholder.com/300x400'\n            }\n            alt={title}\n            width={300}\n          />\n        </ImgWrapper>\n        <CardTitle>{title ? title : 'Movie without a title'}</CardTitle>\n        <RatingStarsContainer>\n          <RatingText>{vote_average ? ratingStars : 'N/A'}</RatingText>\n          <RatingBlock className={ratingClassName}>\n            <RatingNumber>\n              {vote_average ? vote_average.toFixed(1) : 'N/A'}\n            </RatingNumber>\n          </RatingBlock>\n          <MoviesYear>\n            {release_date ? release_date.slice(0, 4) : 'N/A'}\n          </MoviesYear>\n        </RatingStarsContainer>\n      </CardWrapper>\n    </>\n  );\n}\n\nexport default MoviesItem;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './MoviesList.module.css';\nimport MoviesItem from 'components/MoviesItem/MoviesItem';\n\nfunction MoviesList({ movies }) {\n  const location = useLocation();\n  return (\n    <ul className={css.moviesList}>\n      {movies.map(\n        ({ id, poster_path, title, vote_average, release_date }, index) => (\n          <li key={`${id}-${index}`} className={css.moviesItem}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <MoviesItem\n                key={id}\n                id={id}\n                poster_path={poster_path}\n                title={title}\n                vote_average={vote_average}\n                release_date={release_date}\n              />\n            </Link>\n          </li>\n        )\n      )}\n    </ul>\n  );\n}\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string,\n      vote_average: PropTypes.number,\n      release_date: PropTypes.string,\n    })\n  ).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"trandingMovies\":\"HomePage_trandingMovies__2UC1J\"};","// extracted by mini-css-extract-plugin\nexport default {\"ganreList\":\"GanreList_ganreList__Ukkui\",\"ganreListItem\":\"GanreList_ganreListItem__oINk6\"};","import { Link, useLocation } from 'react-router-dom';\nimport css from './GanreList.module.css';\nimport PropTypes from 'prop-types';\n\nfunction GenreList({ genres }) {\n  const location = useLocation();\n\n  return (\n    <ul className={css.ganreList}>\n      {genres.map(({ id, name }) => (\n        <Link to={`genre/${id}`} state={{ from: location }} key={id}>\n          <li className={css.ganreListItem}>\n            <p>{name}</p>\n          </li>\n        </Link>\n      ))}\n    </ul>\n  );\n}\nexport default GenreList;\n\nGenreList.propTypes = {\n  genres: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import styled, { css } from 'styled-components';\nimport { SwiperSlide } from 'swiper/react';\nimport { AiFillFastForward, AiFillFastBackward } from 'react-icons/ai';\nimport { FaReact } from 'react-icons/fa';\n\nexport const CardsLoader = styled(FaReact)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: auto;\n  margin-right: auto;\n  fill: var(--color);\n  animation: rotate 5s infinite linear;\n  -webkit-animation: rotate 5s infinite linear;\n  @keyframes rotate {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nexport const ExpectedWrapper = styled.div`\n  overflow: hidden;\n  margin-top: 190px;\n  padding: 5px;\n  height: 100%;\n\n  @media screen and (max-width: 705px) {\n    margin-top: 230px;\n  }\n\n  @media screen and (max-width: 380px) {\n    margin-top: 250px;\n  }\n`;\n\nexport const NavigationButton = styled.div`\n  &.swiper-button-next,\n  &.swiper-button-prev {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    z-index: 10;\n    width: 30px;\n    height: 30px;\n    padding: 5px;\n    border-radius: 50%;\n    border: 3px solid var(--border-color);\n    background: var(--background-header);\n    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n    cursor: pointer;\n  }\n\n  &.swiper-button-next {\n    right: 10px;\n    --swiper-navigation-size: 0;\n  }\n\n  &.swiper-button-prev {\n    left: 10px;\n    --swiper-navigation-size: 0;\n  }\n\n  &.swiper-button-disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nexport const StyledSwiperSlide = styled(SwiperSlide)`\n  height: 390px;\n  background: var(--background-movies-item);\n  padding: 5px;\n  font-size: 14px;\n  color: var(--color);\n  border: 1px solid var(--border-color);\n  border-radius: 5px;\n  box-sizing: border-box;\n`;\n\nexport const SlideFlexWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 390px;\n`;\n\nexport const ImgExpectedWrapper = styled.div`\n  overflow: hidden;\n`;\n\nexport const ExpectedImg = styled.img`\n  width: 100%;\n  object-fit: cover;\n  transition: transform 0.4s;\n  -webkit-transition: transform 0.4s;\n  -moz-transition: transform 0.4s;\n  -ms-transition: transform 0.4s;\n  -o-transition: transform 0.4s;\n\n  &:hover {\n    transform: scale(1.1);\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    -o-transform: scale(1.1);\n    filter: saturate(165%);\n  }\n`;\n\nexport const ExpectedInfoContainer = styled.div`\n  padding: 5px;\n  display: flex;\n  flex-direction: column;\n  margin-top: auto;\n`;\n\nexport const ExpectedTitle = styled.p`\n  text-overflow: ellipsis;\n  overflow: hidden;\n  width: 160px;\n  white-space: nowrap;\n  margin-bottom: 5px;\n  font-weight: bold;\n`;\n\nexport const ExpectedInfoWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const StyledAiFillFastForward = styled(AiFillFastForward)`\n  color: var(--color);\n`;\nexport const StyledAiFillFastBackward = styled(AiFillFastBackward)`\n  color: var(--color);\n`;\n\n/* Задаем разные цвета для рейтингов */\nexport const red = css`\n  background: #f85032;\n  background: -webkit-linear-gradient(to right, #e73827, #f85032);\n  background: linear-gradient(to right, #e73827, #f85032);\n`;\n\nexport const yellow = css`\n  background: #f7971e;\n  background: -webkit-linear-gradient(to right, #ffd200, #f7971e);\n  background: linear-gradient(to right, #ffd200, #f7971e);\n  color: rgb(36, 35, 35);\n`;\n\nexport const green = css`\n  background: #000000;\n  background: -webkit-linear-gradient(to right, #0f9b0f, #000000);\n  background: linear-gradient(to right, #0f9b0f, #000000);\n  color: #fff;\n`;\n\nexport const ExpextedRating = styled.p`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  width: 10px;\n  height: 10px;\n  padding: 5px;\n  font-weight: bold;\n  font-size: 8px;\n\n  // добавляем стили для класса rating-red\n  &.rating-red {\n    ${red}\n  }\n\n  // добавляем стили для класса rating-yellow\n  &.rating-yellow {\n    ${yellow}\n  }\n\n  // добавляем стили для класса rating-green\n  &.rating-green {\n    ${green}\n  }\n`;\n\nexport const ExpextedYear = styled.p`\n  color: red;\n  font-weight: bold;\n`;\n","import Container from 'components/Container/Container';\nimport apiTheMovieDB from 'service/kino-api';\nimport { toast } from 'react-toastify';\nimport { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Swiper } from 'swiper/react';\nimport { Navigation, Scrollbar } from 'swiper';\nimport 'swiper/css';\nimport 'swiper/css/navigation';\nimport {\n  CardsLoader,\n  ExpectedWrapper,\n  NavigationButton,\n  ExpectedInfoWrapper,\n  ExpectedInfoContainer,\n  StyledSwiperSlide,\n  SlideFlexWrapper,\n  ImgExpectedWrapper,\n  ExpectedImg,\n  ExpectedTitle,\n  ExpextedRating,\n  ExpextedYear,\n  StyledAiFillFastForward,\n  StyledAiFillFastBackward,\n} from './ExpectedMoviesList.styled';\n\nconst ExpectedMoviesList = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const location = useLocation();\n\n  useEffect(() => {\n    apiTheMovieDB\n      .fetchExpectedMovies()\n      .then(newMovies => {\n        setMovies(newMovies);\n      })\n      .catch(error => {\n        setError(error);\n        toast.error('sorry, hernya kakasja');\n      })\n      .finally(setLoading(false));\n  }, []);\n\n  if (error) {\n    return <p>{error.message}</p>;\n  }\n\n  return (\n    <>\n      <Container>\n        {loading ? (\n          <CardsLoader size={50} color=\"aqua\" />\n        ) : (\n          <>\n            <ExpectedWrapper>\n              <Swiper\n                modules={[Navigation, Scrollbar]}\n                navigation={{\n                  nextEl: '.swiper-button-next',\n                  prevEl: '.swiper-button-prev',\n                }}\n                scrollbar={{ draggable: true }}\n                breakpoints={{\n                  320: {\n                    slidesPerView: 1,\n                  },\n                  480: {\n                    slidesPerView: 2,\n                    spaceBetween: 10,\n                  },\n                  680: {\n                    slidesPerView: 3,\n                    spaceBetween: 10,\n                  },\n                  768: {\n                    slidesPerView: 3,\n                    spaceBetween: 10,\n                  },\n                  1000: {\n                    slidesPerView: 4,\n                    spaceBetween: 10,\n                  },\n                  1200: {\n                    slidesPerView: 5,\n                    spaceBetween: 10,\n                  },\n                }}\n              >\n                {movies.map(\n                  ({ poster_path, title, id, vote_average, release_date }) => {\n                    const getRatingColor = () => {\n                      if (vote_average <= 4) {\n                        return 'red';\n                      } else if (vote_average < 7) {\n                        return 'yellow';\n                      } else {\n                        return 'green';\n                      }\n                    };\n                    const ratingColor = getRatingColor();\n                    const ratingClassName = `rating-${ratingColor}`;\n                    return (\n                      <StyledSwiperSlide key={id}>\n                        <SlideFlexWrapper>\n                          <ImgExpectedWrapper>\n                            <Link\n                              to={`/movies/${id}`}\n                              state={{ from: location }}\n                            >\n                              <ExpectedImg\n                                src={\n                                  poster_path\n                                    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                                    : 'https://via.placeholder.com/300x400'\n                                }\n                                alt={title}\n                              />\n                            </Link>\n                          </ImgExpectedWrapper>\n                          <ExpectedInfoContainer>\n                            <ExpectedTitle>\n                              {title ? title : 'Movie without a title'}\n                            </ExpectedTitle>\n                            <ExpectedInfoWrapper>\n                              <ExpextedRating className={ratingClassName}>\n                                {vote_average ? vote_average.toFixed(1) : 'N/A'}\n                              </ExpextedRating>\n                              <ExpextedYear>\n                                {release_date.slice(0, 4)}\n                              </ExpextedYear>\n                            </ExpectedInfoWrapper>\n                          </ExpectedInfoContainer>\n                        </SlideFlexWrapper>\n                      </StyledSwiperSlide>\n                    );\n                  }\n                )}\n                <NavigationButton className=\"swiper-button-next\">\n                  <StyledAiFillFastForward />\n                </NavigationButton>\n                <NavigationButton className=\"swiper-button-prev\">\n                  <StyledAiFillFastBackward />\n                </NavigationButton>\n              </Swiper>\n            </ExpectedWrapper>\n          </>\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default ExpectedMoviesList;\n","import css from './HomePage.module.css';\nimport Container from 'components/Container/Container';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { useState, useEffect, useCallback } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport apiTheMovieDB from 'service/kino-api';\nimport { toast } from 'react-toastify';\nimport GenreList from 'components/GanreList/GanreList';\nimport ExpectedMoviesList from 'components/ExpectedMoviesList/ExpectedMoviesList';\n\nfunction HomePage() {\n  const [movies, setMovies] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [isFetching, setIsFetching] = useState(false);\n  const [genres, setGenres] = useState([]);\n  const [mounted, setMounted] = useState(false);\n\n  const fetchMovies = useCallback(page => {\n    setIsFetching(true);\n\n    apiTheMovieDB\n      .fetchTrending(page)\n      .then(newMovies => {\n        setIsFetching(false);\n        if (newMovies.length === 0) {\n          toast.error(\"sorry, that's all the movies we could find\");\n        }\n\n        setMovies(prevMovies => [...prevMovies, ...newMovies]);\n        setCurrentPage(page);\n      })\n      .catch(error => {\n        setIsFetching(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    setMounted(true);\n    return () => setMounted(false);\n  }, []);\n\n  useEffect(() => {\n    if (mounted && movies.length === 0) {\n      fetchMovies(currentPage);\n    }\n  }, [currentPage, fetchMovies, movies.length, mounted]);\n\n  useEffect(() => {\n    apiTheMovieDB\n      .fetchAllgenres()\n      .then(data => {\n        setGenres(data);\n      })\n      .catch('error');\n  }, []);\n\n  return (\n    <Container>\n      <ExpectedMoviesList />\n      <GenreList genres={genres} />\n      <section className={css.trandingMovies}>\n        <InfiniteScroll\n          dataLength={movies.length}\n          next={() => fetchMovies(currentPage + 1)}\n          hasMore={!isFetching}\n          loader={<p>Loading...</p>}\n        >\n          <MoviesList movies={movies} />\n        </InfiniteScroll>\n      </section>\n    </Container>\n  );\n}\n\nexport default HomePage;\n"],"names":["CardWrapper","styled","ImgWrapper","MoviesImg","CardTitle","RatingStarsContainer","GoldStar","GrayStar","RatingText","RatingNumber","MoviesYear","red","css","yellow","green","RatingBlock","poster_path","title","vote_average","release_date","percentRating","goldStars","Math","floor","ratingStars","Array","from","length","_","i","ratingColor","getRatingColor","ratingClassName","src","alt","width","className","toFixed","slice","movies","location","useLocation","map","index","id","to","state","genres","name","CardsLoader","FaReact","ExpectedWrapper","NavigationButton","StyledSwiperSlide","SwiperSlide","SlideFlexWrapper","ImgExpectedWrapper","ExpectedImg","ExpectedInfoContainer","ExpectedTitle","ExpectedInfoWrapper","StyledAiFillFastForward","AiFillFastForward","StyledAiFillFastBackward","AiFillFastBackward","ExpextedRating","ExpextedYear","useState","setMovies","error","setError","loading","setLoading","useEffect","apiTheMovieDB","then","newMovies","catch","toast","finally","message","Container","size","color","modules","Navigation","Scrollbar","navigation","nextEl","prevEl","scrollbar","draggable","breakpoints","slidesPerView","spaceBetween","currentPage","setCurrentPage","isFetching","setIsFetching","setGenres","mounted","setMounted","fetchMovies","useCallback","page","prevMovies","data","dataLength","next","hasMore","loader","MoviesList"],"sourceRoot":""}
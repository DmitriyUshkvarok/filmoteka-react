{"version":3,"file":"static/js/617.93e3d874.chunk.js","mappings":"2NACA,EAA6B,+BAA7B,EAAyE,+B,mBCC5DA,EAAcC,EAAAA,GAAAA,IAAH,yHAOXC,EAAaD,EAAAA,GAAAA,IAAH,oEAKVE,EAAYF,EAAAA,GAAAA,IAAH,qaAkBTG,EAAYH,EAAAA,GAAAA,GAAH,mIAQTI,EAAuBJ,EAAAA,GAAAA,IAAH,kEAKpBK,EAAWL,EAAAA,GAAAA,KAAH,4DAKRM,EAAWN,EAAAA,GAAAA,KAAH,4DAKRO,EAAaP,EAAAA,GAAAA,EAAH,uEAKVQ,EAAeR,EAAAA,GAAAA,KAAH,2CAIZS,EAAaT,EAAAA,GAAAA,EAAH,uGAQVU,GAAMC,EAAAA,EAAAA,IAAH,gLAMHC,GAASD,EAAAA,EAAAA,IAAH,2MAONE,GAAQF,EAAAA,EAAAA,IAAH,gMAOLG,EAAcd,EAAAA,GAAAA,IAAH,+xBAalBU,EAKAE,EAKAC,G,SC1CN,MA3DA,YAAyE,IAAnDE,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,aAChDC,EAA+B,GAAfF,EAChBG,EAAYC,KAAKC,MAAMH,EAAgB,IAKvCI,EAAcC,MAAMC,KAAK,CAAEC,OAAQ,KAAM,SAACC,EAAGC,GACjD,OAAIA,EAAIR,GACC,SAACf,EAAD,mCAAuBuB,KAEvB,SAACtB,EAAD,mCAAuBsB,GAEjC,IAYKC,EAViB,SAAAZ,GACrB,OAAIA,GAAgB,EACX,MACEA,EAAe,EACjB,SAEA,OAEV,CAEmBa,CAAeb,GAC7Bc,EAAe,iBAAaF,GAElC,OACE,+BACE,UAAC9B,EAAD,YACE,SAACE,EAAD,WACE,SAACC,EAAD,CACE8B,IACEjB,EAAW,0CAC4BA,GACnC,sCAENkB,IAAKjB,EACLkB,MAAO,SAGX,SAAC/B,EAAD,UAAYa,GAAgB,2BAC5B,UAACZ,EAAD,YACE,SAACG,EAAD,UAAaU,EAAeM,EAAc,SAC1C,SAACT,EAAD,CAAaqB,UAAWJ,EAAxB,UACE,SAACvB,EAAD,UACGS,EAAeA,EAAamB,QAAQ,GAAK,WAG9C,SAAC3B,EAAD,UACGS,EAAeA,EAAamB,MAAM,EAAG,GAAK,eAMtD,EC3CD,MAvBA,YAAiC,IAAXC,EAAU,EAAVA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,eAAIL,UAAWxB,EAAf,SACG2B,EAAOG,KACN,WAAyDC,GAAzD,IAAGC,EAAH,EAAGA,GAAI5B,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,aAAcC,EAAzC,EAAyCA,aAAzC,OACE,eAA2BiB,UAAWxB,EAAtC,UACE,SAAC,KAAD,CAAMiC,GAAE,kBAAaD,GAAME,MAAO,CAAEpB,KAAMc,GAA1C,UACE,SAAC,EAAD,CAEEI,GAAIA,EACJ5B,YAAaA,EACbC,MAAOA,EACPC,aAAcA,EACdC,aAAcA,GALTyB,MAHX,UAAYA,EAAZ,YAAkBD,GADpB,KAiBP,C,gHC1BD,GAAgB,UAAY,8B,UCA5B,EAAuB,wBAAvB,EAA6D,+BAA7D,EAAuG,4B,SCwCvG,I,EAAA,EApCA,YAAkC,IAAbI,EAAY,EAAZA,SACnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAiBA,OACE,kBAAMd,UAAWxB,EAAUmC,SAZR,SAAAI,GACnBA,EAAEC,iBACGH,GAKLF,EAASE,GACTC,EAAS,KALPG,EAAAA,GAAAA,MAAY,iCAMf,EAGC,WACE,kBACEjB,UAAWxB,EACX0C,KAAK,QACLC,MAAON,EACPO,KAAK,OACLC,aAAa,MACbC,YAAY,uBACZC,SAxBoB,SAAAR,GACxBD,EAASC,EAAES,cAAcL,MAAMM,cAAcC,OAC9C,KAwBG,mBAAQN,KAAK,SAASpB,UAAWxB,EAAjC,sBAKL,E,wCCtCD,GAAgB,aAAe,gCAAgC,iBAAmB,qC,uCCAlF,GAAgB,aAAe,mCAAmC,cAAgB,oCAAoC,YAAc,kCAAkC,WAAa,iCAAiC,sBAAwB,6C,SCC/NmD,E,QAAc9D,GAAAA,OAAH,4aCSxB,EARuB,SAAC,GAAyB,IAAvB+D,EAAsB,EAAtBA,gBACxB,OACE,SAACD,EAAD,CAAaP,KAAK,SAASS,QAAS,kBAAMD,GAAN,EAApC,sBAIH,E,UCgGD,MAhGA,WACE,OAAwChB,EAAAA,EAAAA,UAAS,GAAjD,eAAOkB,EAAP,KAAqBC,EAArB,KACA,GAA4BnB,EAAAA,EAAAA,UAAS,IAArC,eAAOT,EAAP,KAAe6B,EAAf,KACA,GAA0BpB,EAAAA,EAAAA,UAAS,MAAnC,eAAOqB,EAAP,KAAcC,EAAd,KACA,GAA8BtB,EAAAA,EAAAA,WAAS,GAAvC,eAAOuB,EAAP,KAAgBC,EAAhB,KACA,GAAwBxB,EAAAA,EAAAA,UAAS,GAAjC,eAAOyB,EAAP,KAAaC,EAAb,KACA,GAAoC1B,EAAAA,EAAAA,WAAS,GAA7C,eAAO2B,EAAP,KAAmBC,EAAnB,KA+BA,IA7BAC,EAAAA,EAAAA,YAAU,WACR,GAAqB,IAAjBX,EAAoB,CACtB,IAAMY,EAAW,mCAAG,2FAClBN,GAAW,GADO,kBAGQO,EAAAA,EAAAA,YAA0BN,EAAMP,GAHxC,OAIS,KADnBc,EAHU,QAIFrD,QACZiD,GAAc,GACD,IAATH,GACFL,EAAU,IACVf,EAAAA,GAAAA,MAAY,sDAEZA,EAAAA,GAAAA,MAAY,wDAGduB,GAAc,GACdR,GAAU,SAAAa,GAAU,wBAAQA,IAAR,OAAuBD,GAAvB,KAdN,gDAiBhBV,EAAS,EAAD,IAjBQ,yBAmBhBE,GAAW,GAnBK,4EAAH,qDAuBjBM,GACD,CACF,GAAE,CAACL,EAAMP,IAENG,EACF,OAAO,uBAAIA,EAAMa,UAKnB,IAFA,IAAMC,EAAc,GACdC,GAAc,IAAIC,MAAOC,cACtBC,EAAOH,EAAaG,GAAQH,EAAc,GAAIG,IACrDJ,EAAYK,KAAKD,GAOnB,OACE,+BACE,SAACE,EAAA,EAAD,WACE,iBAAKrD,UAAWxB,EAAAA,gBAAhB,WACE,iBAAKwB,UAAWxB,EAAAA,aAAhB,WACE,kBAAOwB,UAAWxB,EAAAA,YAAiB8E,QAAQ,cAA3C,6BAGA,iBAAKtD,UAAWxB,EAAAA,cAAhB,WACE,SAAC,KAAD,CACEwB,UAAWxB,EAAAA,OACX+E,gBAAgB,eAChBrC,KAAK,cACLV,GAAG,cACHW,MAAO,CAAEA,MAAOW,EAAc0B,MAAO1B,GACrCP,SAAU,SAAAkC,GAAc,OACtB1B,EAAgB0B,EAAetC,MADT,EAGxBuC,QAASX,EAAYzC,KAAI,SAAA6C,GAAI,MAAK,CAChChC,MAAOgC,EACPK,MAAOL,EAFoB,IAI7B7B,YAAY,gBACZqC,cAAc,UAEhB,gBAAK3D,UAAWxB,EAAAA,mBAInB2B,EAAOZ,OAAS,GACf,SAACqE,EAAA,EAAD,CAAYzD,OAAQA,IAClBgC,GACF,cAAGnC,UAAWxB,EAAAA,sBAAd,yBAEA,cAAGwB,UAAWxB,EAAAA,WAAd,iDAID+D,IAAc,SAAC,EAAD,CAAgBX,gBA1Cf,WACtBU,EAAQD,EAAO,EAChB,UA6CF,ECvED,MA5BA,WACE,IAAMjC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,iBAAKL,UAAWxB,EAAAA,gBAAhB,WACE,gBAAIwB,UAAWxB,EAAAA,aAAf,WACE,eAAIwB,UAAWxB,EAAAA,iBAAf,UACE,SAAC,KAAD,CAAMiC,GAAE,iBAAoBC,MAAO,CAAEpB,KAAMc,GAA3C,uBAIF,eAAIJ,UAAWxB,EAAAA,iBAAf,UACE,SAAC,KAAD,CAAMiC,GAAE,oBAAuBC,MAAO,CAAEpB,KAAMc,GAA9C,0BAIF,eAAIJ,UAAWxB,EAAAA,iBAAf,UACE,SAAC,KAAD,CAAMiC,GAAE,0BAA6BC,MAAO,CAAEpB,KAAMc,GAApD,mCAKJ,0BACE,SAACyD,EAAD,QAIP,ECyDD,EA7EkB,WAChB,IAAMC,GAAWC,EAAAA,EAAAA,MACX3D,GAAWC,EAAAA,EAAAA,MACjB,GAA4BO,EAAAA,EAAAA,UAAS,IAArC,eAAOT,EAAP,KAAe6B,EAAf,KACA,GAA0BpB,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAsCF,EAAAA,EAAAA,UAAS,GAA/C,eAAOoD,EAAP,KAAoBC,EAApB,KACA,GAA8BrD,EAAAA,EAAAA,WAAS,GAAvC,eAAOsD,EAAP,KAAgBC,EAAhB,KAEMzB,GAAc0B,EAAAA,EAAAA,cAClB,SAAA/B,GACE8B,GAAW,GACXxB,EAAAA,EAAAA,iBACoB9B,EAAOwB,GACxBgC,MAAK,SAAAzB,GACqB,IAArBA,EAAUrD,QACZ0B,EAAAA,GAAAA,MAAY,8CACZkD,GAAW,KAEXnC,GAAU,SAAAa,GAAU,wBAAQA,IAAR,OAAuBD,GAAvB,IACpBqB,EAAe5B,GAElB,IACAiC,OAAM,SAAArC,GACLhB,EAAAA,GAAAA,MAAY,0BACb,GACJ,GACD,CAACJ,KAGH4B,EAAAA,EAAAA,YAAU,WACR3B,EAAS,IAAIyD,gBAAgBnE,EAASoE,QAAQC,IAAI,UAClDR,EAAe,EAChB,GAAE,CAAC7D,EAASoE,UAEb/B,EAAAA,EAAAA,YAAU,WACH5B,GAGL6B,EAAY,EACb,GAAE,CAACA,EAAa7B,IAcjB,OACE,+BACE,UAACwC,EAAA,EAAD,YACE,qBAASrD,UAAWxB,EAAAA,UAApB,WACE,SAAC,EAAD,CAAWmC,SAhBM,SAAA+D,GACnBA,IAAa7D,IAGjBmB,EAAU,IACV8B,EAAS,UAAD,OAAWY,IACpB,KAWO,SAAC,EAAD,QAEF,oBAAS1E,UAAWxB,EAAAA,iBAApB,SACG2B,IACC,SAAC,IAAD,CACEwE,WAAYxE,EAAOZ,OACnBqF,KAfW,WACrBlC,EAAYsB,EAAc,EAC3B,EAcWE,QAASA,EACTW,QAAQ,sCAJV,UAME,SAACjB,EAAA,EAAD,CAAYzD,OAAQA,YAOjC,C,qCCrFK2E,EAAG,gCACHC,EAAM,mCAmGZ,IAAMpC,EAAgB,CACpBqC,oBA3CF,SAA6BxE,GAAe,IAAX6B,EAAU,uDAAH,EACtC,OAAO4C,EAAAA,EAAAA,IAAA,UACGH,EADH,kBACgBtE,EADhB,kCAC4CuE,EAD5C,iBACwD1C,IAC5DgC,MAAK,SAAAa,GAAQ,OAAIA,EAASC,KAAKC,IAAlB,GACjB,EAwCCC,wBAtCF,SAAiC7E,GAC/B,OAAOyE,EAAAA,EAAAA,IAAA,UACGH,EADH,kBACgBtE,EADhB,oBAC8BuE,IAClCV,MAAK,SAAAa,GAAQ,OAAIA,EAASC,IAAb,GACjB,EAmCCG,cApGF,WAAkC,IAAXjD,EAAU,uDAAH,EAC5B,OAAO4C,EAAAA,EAAAA,IAAA,UACGH,EADH,oCACkCC,EADlC,iBAC8C1C,IAClDgC,MAAK,SAAAa,GAAQ,OAAIA,EAASC,KAAKI,OAAlB,GACjB,EAiGCC,iBA/FF,SAA0B3E,GAAkB,IAAXwB,EAAU,uDAAH,EACtC,OAAO4C,EAAAA,EAAAA,IAAA,UACGH,EADH,8BAC4BjE,EAD5B,oBAC6CkE,EAD7C,iBACyD1C,IAC7DgC,MAAK,SAAAa,GAAQ,OAAIA,EAASC,KAAKI,OAAlB,GACjB,EA4FCE,kBA1FF,SAA2BjF,GACzB,OAAOyE,EAAAA,EAAAA,IAAA,UACGH,EADH,iBACetE,EADf,oBAC6BuE,IACjCV,MAAK,SAAAa,GAAQ,OAAIA,EAASC,IAAb,GACjB,EAuFCO,kBArFF,SAA2BlF,GACzB,OAAOyE,EAAAA,EAAAA,IAAA,UACGH,EADH,iBACetE,EADf,4BACqCuE,IACzCV,MAAK,SAAAa,GAAQ,OAAIA,EAASC,IAAb,GACjB,EAkFCQ,iBAhFF,SAA0BnF,GACxB,OAAOyE,EAAAA,EAAAA,IAAA,UACGH,EADH,iBACetE,EADf,4BACqCuE,IACzCV,MAAK,SAAAa,GAAQ,OAAIA,EAASC,KAAKI,OAAlB,GACjB,EA6ECK,mBA3EF,SAA4BC,GAC1B,OAAOZ,EAAAA,EAAAA,IAAA,UACGH,EADH,iBACee,EADf,2BACyCd,IAC7CV,MAAK,SAAAa,GAAQ,OAAIA,EAASC,KAAKI,OAAlB,GACjB,EAwECO,eAtEF,WACE,OAAOb,EAAAA,EAAAA,IAAA,UACGH,EADH,qCACmCC,IACvCV,MAAK,SAAAa,GAAQ,OAAIA,EAASC,KAAKY,MAAlB,GACjB,EAmECC,aAjEF,SAAsBxF,GAAe,IAAX6B,EAAU,uDAAH,EAC/B,OAAO4C,EAAAA,EAAAA,IAAA,UACGH,EADH,mCACiCC,EADjC,wBACoDvE,EADpD,iBAC+D6B,IACnEgC,MAAK,SAAAa,GAAQ,OAAIA,EAASC,IAAb,GACjB,EA8DCc,YA5DF,WAA4C,IAAvB5D,EAAsB,uDAAf,EAAGxB,EAAY,uDAAJ,GAC/BqF,EAAMrF,EAAK,UACViE,EADU,iCACkBC,EADlB,iBAC8B1C,EAD9B,kBAC4CxB,GAD5C,UAEViE,EAFU,kCAEmBC,EAFnB,iBAE+B1C,GAChD,OAAO4C,EAAAA,EAAAA,IAAUiB,GAAK7B,MAAK,SAAAa,GAAQ,OAAIA,EAASC,IAAb,GACpC,EAwDCgB,YA1CF,WAA8C,IAAzB9D,EAAwB,uDAAjB,EAAGP,EAAc,uCAC3C,OAAOmD,EAAAA,EAAAA,IAAA,UAEAH,EAFA,kCAE6BC,EAF7B,yCAEiE1C,EAFjE,iCAE8FP,IAElGuC,MAAK,SAAAa,GAAQ,OAAIA,EAASC,KAAKI,OAAlB,GACjB,EAqCCa,oBAnCF,WACE,OAAOnB,EAAAA,EAAAA,IAAA,UACGH,EADH,mCACiCC,IACrCV,MAAK,SAAAa,GAAQ,OAAIA,EAASC,KAAKI,OAAlB,GACjB,EAgCCc,mBA9BF,WAA8C,IAAlBrC,EAAiB,uDAAH,EACxC,OAAOiB,EAAAA,EAAAA,IAAA,UACGH,EADH,oCACkCC,EADlC,iBAC8Cf,IAClDK,MAAK,SAAAa,GAAQ,OAAIA,EAASC,IAAb,GACjB,EA2BCmB,yBAzBF,WAAoD,IAAlBtC,EAAiB,uDAAH,EAC9C,OAAOiB,EAAAA,EAAAA,IAAA,UAEAH,EAFA,mCAE8BC,EAF9B,sCAE8D,IAAI9B,MAClEsD,cACArG,MAAM,EAAG,IAJT,iBAIqB8D,IAEzBK,MAAK,SAAAa,GAAQ,OAAIA,EAASC,IAAb,GACjB,GAoBD,K","sources":["webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesItem/MoviesItem.styled.js","components/MoviesItem/MoviesItem.jsx","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/pages/MoviesPage/MoviePage.module.css?dc7a","webpack://react-homework-template/./src/components/Searchbar/Searchbar.module.css?8d9e","components/Searchbar/Searchbar.jsx","webpack://react-homework-template/./src/components/MoviesBar/MoviesBar.module.css?9446","webpack://react-homework-template/./src/components/SearchByYear/SearchByYear.module.css?3dbb","components/ButtonLoadMore/ButtonLoadMore.styled.js","components/ButtonLoadMore/ButtonLoadMore.jsx","components/SearchByYear/SearchByYear.jsx","components/MoviesBar/MoviesBar.jsx","pages/MoviesPage/MoviePage.jsx","service/kino-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"MoviesList_moviesList__P6SP5\",\"moviesItem\":\"MoviesList_moviesItem__r+0sq\"};","import styled, { css } from 'styled-components';\n\nexport const CardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n`;\n\nexport const ImgWrapper = styled.div`\n  overflow: hidden;\n  margin-bottom: 5px;\n`;\n\nexport const MoviesImg = styled.img`\n  max-width: 100%;\n  object-fit: cover;\n  transition: transform 0.4s;\n  -webkit-transition: transform 0.4s;\n  -moz-transition: transform 0.4s;\n  -ms-transition: transform 0.4s;\n  -o-transition: transform 0.4s;\n\n  &:hover {\n    transform: scale(1.1);\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    -o-transform: scale(1.1);\n  }\n`;\n\nexport const CardTitle = styled.h3`\n  max-width: 300px;\n  color: var(--color);\n  font-size: 14px;\n  margin-bottom: 0;\n  margin-top: auto;\n`;\n\nexport const RatingStarsContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const GoldStar = styled.span`\n  font-size: 10px;\n  color: gold;\n`;\n\nexport const GrayStar = styled.span`\n  font-size: 10px;\n  color: gray;\n`;\n\nexport const RatingText = styled.p`\n  color: rgb(36, 35, 35);\n  font-size: 10px;\n`;\n\nexport const RatingNumber = styled.span`\n  font-size: 8px;\n`;\n\nexport const MoviesYear = styled.p`\n  color: red;\n  font-weight: bold;\n  font-size: 12px;\n  margin-left: auto;\n`;\n\n/* Задаем разные цвета для рейтингов */\nexport const red = css`\n  background: #f85032;\n  background: -webkit-linear-gradient(to right, #e73827, #f85032);\n  background: linear-gradient(to right, #e73827, #f85032);\n`;\n\nexport const yellow = css`\n  background: #f7971e;\n  background: -webkit-linear-gradient(to right, #ffd200, #f7971e);\n  background: linear-gradient(to right, #ffd200, #f7971e);\n  color: rgb(36, 35, 35);\n`;\n\nexport const green = css`\n  background: #000000;\n  background: -webkit-linear-gradient(to right, #0f9b0f, #000000);\n  background: linear-gradient(to right, #0f9b0f, #000000);\n  color: #fff;\n`;\n\nexport const RatingBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  width: 10px;\n  heigth: 10px;\n  padding: 5px;\n  font-weight: bold;\n  margin-left: 10px;\n\n  // добавляем стили для класса rating-red\n  &.rating-red {\n    ${red}\n  }\n\n  // добавляем стили для класса rating-yellow\n  &.rating-yellow {\n    ${yellow}\n  }\n\n  // добавляем стили для класса rating-green\n  &.rating-green {\n    ${green}\n  }\n`;\n","import {\n  CardWrapper,\n  ImgWrapper,\n  MoviesImg,\n  CardTitle,\n  RatingStarsContainer,\n  GoldStar,\n  GrayStar,\n  RatingText,\n  RatingNumber,\n  RatingBlock,\n  MoviesYear,\n} from './MoviesItem.styled';\n\nfunction MoviesItem({ poster_path, title, vote_average, release_date }) {\n  const percentRating = vote_average * 10; // convert 0-10 rating to percentage\n  const goldStars = Math.floor(percentRating / 10); // number of gold stars\n  // eslint-disable-next-line no-unused-vars\n  const grayStars = 10 - goldStars; // number of gray stars\n\n  // create an array of stars with the appropriate color\n  const ratingStars = Array.from({ length: 10 }, (_, i) => {\n    if (i < goldStars) {\n      return <GoldStar key={`star-${i}`}>&#9733;</GoldStar>;\n    } else {\n      return <GrayStar key={`star-${i}`}>&#9733;</GrayStar>;\n    }\n  });\n\n  const getRatingColor = vote_average => {\n    if (vote_average <= 4) {\n      return 'red';\n    } else if (vote_average < 7) {\n      return 'yellow';\n    } else {\n      return 'green';\n    }\n  };\n\n  const ratingColor = getRatingColor(vote_average);\n  const ratingClassName = `rating-${ratingColor}`;\n\n  return (\n    <>\n      <CardWrapper>\n        <ImgWrapper>\n          <MoviesImg\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                : 'https://via.placeholder.com/300x400'\n            }\n            alt={title}\n            width={300}\n          />\n        </ImgWrapper>\n        <CardTitle>{title ? title : 'Movie without a title'}</CardTitle>\n        <RatingStarsContainer>\n          <RatingText>{vote_average ? ratingStars : 'N/A'}</RatingText>\n          <RatingBlock className={ratingClassName}>\n            <RatingNumber>\n              {vote_average ? vote_average.toFixed(1) : 'N/A'}\n            </RatingNumber>\n          </RatingBlock>\n          <MoviesYear>\n            {release_date ? release_date.slice(0, 4) : 'N/A'}\n          </MoviesYear>\n        </RatingStarsContainer>\n      </CardWrapper>\n    </>\n  );\n}\n\nexport default MoviesItem;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './MoviesList.module.css';\nimport MoviesItem from 'components/MoviesItem/MoviesItem';\n\nfunction MoviesList({ movies }) {\n  const location = useLocation();\n  return (\n    <ul className={css.moviesList}>\n      {movies.map(\n        ({ id, poster_path, title, vote_average, release_date }, index) => (\n          <li key={`${id}-${index}`} className={css.moviesItem}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <MoviesItem\n                key={id}\n                id={id}\n                poster_path={poster_path}\n                title={title}\n                vote_average={vote_average}\n                release_date={release_date}\n              />\n            </Link>\n          </li>\n        )\n      )}\n    </ul>\n  );\n}\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string,\n      vote_average: PropTypes.number,\n      release_date: PropTypes.string,\n    })\n  ).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"MoviePage_searchbar__Hfnpz\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Searchbar_form__D-hp5\",\"inputSearch\":\"Searchbar_inputSearch__xAbPo\",\"serchBtn\":\"Searchbar_serchBtn__JmOW6\"};","import { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\nimport css from './Searchbar.module.css';\nimport { useState } from 'react';\n\nfunction Searchbar({ onSubmit }) {\n  const [query, setQuery] = useState('');\n\n  const handleQueryChange = e => {\n    setQuery(e.currentTarget.value.toLowerCase().trim());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!query) {\n      toast.error('Please, enter your name movie!');\n      return;\n    }\n\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <input\n        className={css.inputSearch}\n        name=\"query\"\n        value={query}\n        type=\"text\"\n        autoComplete=\"off\"\n        placeholder=\"Enter the movie name\"\n        onChange={handleQueryChange}\n      />\n      <button type=\"submit\" className={css.serchBtn}>\n        Search\n      </button>\n    </form>\n  );\n}\n\nexport default Searchbar;\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"movieBarList\":\"MoviesBar_movieBarList__OTYcq\",\"movieBarListItem\":\"MoviesBar_movieBarListItem__e8kT6\"};","// extracted by mini-css-extract-plugin\nexport default {\"selectedYear\":\"SearchByYear_selectedYear__3bTgh\",\"selectWrapper\":\"SearchByYear_selectWrapper__cb+ap\",\"selectLabel\":\"SearchByYear_selectLabel__tWzcV\",\"searchText\":\"SearchByYear_searchText__5iNfz\",\"loadingMoviesListYear\":\"SearchByYear_loadingMoviesListYear__uSiHT\"};","import styled from 'styled-components';\n\nexport const BtnLoadMore = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 200px;\n  height: 50px;\n  border-radius: 5px;\n  background: var(--background-movies-item);\n  margin-left: auto;\n  margin-right: auto;\n  border: none;\n  text-transform: uppercase;\n  color: var(--color);\n  cursor: pointer;\n  transition: var(--transition);\n\n  &:hover {\n    background: var(--background-body);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { BtnLoadMore } from './ButtonLoadMore.styled';\n\nconst ButtonLoadMore = ({ hendleIncrement }) => {\n  return (\n    <BtnLoadMore type=\"button\" onClick={() => hendleIncrement()}>\n      Load More\n    </BtnLoadMore>\n  );\n};\n\nexport default ButtonLoadMore;\n\nButtonLoadMore.propTypes = {\n  handleIncrement: PropTypes.func,\n};\n","import { useState, useEffect } from 'react';\nimport css from './SearchByYear.module.css';\nimport apiTheMovieDB from 'service/kino-api';\nimport { toast } from 'react-toastify';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport ButtonLoadMore from 'components/ButtonLoadMore/ButtonLoadMore';\nimport Select from 'react-select';\nimport Container from 'components/Container/Container';\n\nfunction SearchByYears() {\n  const [selectedYear, setSelectedYear] = useState(0);\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(1);\n  const [showButton, setShowButton] = useState(false);\n\n  useEffect(() => {\n    if (selectedYear !== 0) {\n      const fetchMovies = async () => {\n        setLoading(true);\n        try {\n          const newMovies = await apiTheMovieDB.fetchByYear(page, selectedYear);\n          if (newMovies.length === 0) {\n            setShowButton(false);\n            if (page === 1) {\n              setMovies([]);\n              toast.error(\"Sorry, we couldn't find any movies for that year.\");\n            } else {\n              toast.error(\"That's all the movies we could find for that year.\");\n            }\n          } else {\n            setShowButton(true);\n            setMovies(prevMovies => [...prevMovies, ...newMovies]);\n          }\n        } catch (error) {\n          setError(error);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      fetchMovies();\n    }\n  }, [page, selectedYear]);\n\n  if (error) {\n    return <p>{error.message}</p>;\n  }\n\n  const yearOptions = [];\n  const currentYear = new Date().getFullYear();\n  for (let year = currentYear; year >= currentYear - 50; year--) {\n    yearOptions.push(year);\n  }\n\n  const hendleIncrement = () => {\n    setPage(page + 1);\n  };\n\n  return (\n    <>\n      <Container>\n        <div className={css.selectedWrapper}>\n          <div className={css.selectedYear}>\n            <label className={css.selectLabel} htmlFor=\"year-select\">\n              Select a year:\n            </label>\n            <div className={css.selectWrapper}>\n              <Select\n                className={css.select}\n                classNamePrefix=\"react-select\"\n                name=\"year-select\"\n                id=\"year-select\"\n                value={{ value: selectedYear, label: selectedYear }}\n                onChange={selectedOption =>\n                  setSelectedYear(selectedOption.value)\n                }\n                options={yearOptions.map(year => ({\n                  value: year,\n                  label: year,\n                }))}\n                placeholder=\"Select a year\"\n                menuPlacement=\"auto\"\n              />\n              <div className={css.selectIcon}></div>\n            </div>\n          </div>\n\n          {movies.length > 0 ? (\n            <MoviesList movies={movies} />\n          ) : loading ? (\n            <p className={css.loadingMoviesListYear}>Loading...</p>\n          ) : (\n            <p className={css.searchText}>\n              Please select a year to see movies.\n            </p>\n          )}\n          {showButton && <ButtonLoadMore hendleIncrement={hendleIncrement} />}\n        </div>\n      </Container>\n    </>\n  );\n}\n\nexport default SearchByYears;\n","import css from './MoviesBar.module.css';\nimport { Link, useLocation } from 'react-router-dom';\nimport SearchByYears from 'components/SearchByYear/SearchByYear';\n\nfunction MoviesBar() {\n  const location = useLocation();\n\n  return (\n    <div className={css.movieBarWrapper}>\n      <ul className={css.movieBarList}>\n        <li className={css.movieBarListItem}>\n          <Link to={`/movie/actors/`} state={{ from: location }}>\n            Actors\n          </Link>\n        </li>\n        <li className={css.movieBarListItem}>\n          <Link to={`/movie/top-rated/`} state={{ from: location }}>\n            Top Rated\n          </Link>\n        </li>\n        <li className={css.movieBarListItem}>\n          <Link to={`/movie/expected-movies/`} state={{ from: location }}>\n            Expected Movies\n          </Link>\n        </li>\n      </ul>\n      <div>\n        <SearchByYears />\n      </div>\n    </div>\n  );\n}\nexport default MoviesBar;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport css from './MoviePage.module.css';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport Container from 'components/Container/Container';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport apiTheMovieDB from 'service/kino-api';\nimport { toast } from 'react-toastify';\nimport MoviesBar from 'components/MoviesBar/MoviesBar';\n\nconst MoviePage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState('');\n  const [currentPage, setCurrentPage] = useState(0);\n  const [hasMore, setHasMore] = useState(false);\n\n  const fetchMovies = useCallback(\n    page => {\n      setHasMore(true);\n      apiTheMovieDB\n        .fetchSearchMovie(query, page)\n        .then(newMovies => {\n          if (newMovies.length === 0) {\n            toast.error(\"sorry, that's all the movies we could find\");\n            setHasMore(false);\n          } else {\n            setMovies(prevMovies => [...prevMovies, ...newMovies]);\n            setCurrentPage(page);\n          }\n        })\n        .catch(error => {\n          toast.error('Failed to fetch movies.');\n        });\n    },\n    [query]\n  );\n\n  useEffect(() => {\n    setQuery(new URLSearchParams(location.search).get('query'));\n    setCurrentPage(1);\n  }, [location.search]);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    fetchMovies(1);\n  }, [fetchMovies, query]);\n\n  const handleFormSubmit = newQuery => {\n    if (newQuery === query) {\n      return;\n    }\n    setMovies([]);\n    navigate(`?query=${newQuery}`);\n  };\n\n  const handleLoadMore = () => {\n    fetchMovies(currentPage + 1);\n  };\n\n  return (\n    <>\n      <Container>\n        <section className={css.searchbar}>\n          <Searchbar onSubmit={handleFormSubmit} />\n          <MoviesBar />\n        </section>\n        <section className={css.moviesListSearch}>\n          {movies && (\n            <InfiniteScroll\n              dataLength={movies.length}\n              next={handleLoadMore}\n              hasMore={hasMore}\n              loader={<p>Loading...</p>}\n            >\n              <MoviesList movies={movies} />\n            </InfiniteScroll>\n          )}\n        </section>\n      </Container>\n    </>\n  );\n};\n\nexport default MoviePage;\n","import axios from 'axios';\nconst URL = `https://api.themoviedb.org/3/`;\nconst key = 'f27eea818d2010463700365b0c06a16e';\n\nfunction fetchTrending(page = 1) {\n  return axios\n    .get(`${URL}trending/all/day?api_key=${key}&page=${page}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchSearchMovie(query, page = 1) {\n  return axios\n    .get(`${URL}search/movie?query=${query}&api_key=${key}&page=${page}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchMovieDetalis(id) {\n  return axios\n    .get(`${URL}movie/${id}?api_key=${key}`)\n    .then(response => response.data);\n}\n\nfunction fetchMovieCredits(id) {\n  return axios\n    .get(`${URL}movie/${id}/credits?api_key=${key}`)\n    .then(response => response.data);\n}\n\nfunction fetchMovieReview(id) {\n  return axios\n    .get(`${URL}movie/${id}/reviews?api_key=${key}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchTrailerMovies(movieId) {\n  return axios\n    .get(`${URL}movie/${movieId}/videos?api_key=${key}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchAllgenres() {\n  return axios\n    .get(`${URL}/genre/movie/list?api_key=${key}`)\n    .then(response => response.data.genres);\n}\n\nfunction fetchByGenre(id, page = 1) {\n  return axios\n    .get(`${URL}/discover/movie?api_key=${key}&with_genres=${id}&page=${page}`)\n    .then(response => response.data);\n}\n\nfunction fetchActors(page = 1, query = '') {\n  const url = query\n    ? `${URL}search/person?api_key=${key}&page=${page}&query=${query}`\n    : `${URL}person/popular?api_key=${key}&page=${page}`;\n  return axios.get(url).then(response => response.data);\n}\n\nfunction fetchMoviesbyActors(id, page = 1) {\n  return axios\n    .get(`${URL}person/${id}/movie_credits?api_key=${key}&page=${page}`)\n    .then(response => response.data.cast);\n}\n\nfunction fetchActorInfoAndMovies(id) {\n  return axios\n    .get(`${URL}person/${id}?api_key=${key}`)\n    .then(response => response.data);\n}\n\nfunction fetchByYear(page = 1, selectedYear) {\n  return axios\n    .get(\n      `${URL}discover/movie?api_key=${key}&sort_by=popularity.desc&page=${page}&primary_release_year=${selectedYear}`\n    )\n    .then(response => response.data.results);\n}\n\nfunction fetchExpectedMovies() {\n  return axios\n    .get(`${URL}/movie/upcoming?api_key=${key}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchFilmsByRating(currentPage = 1) {\n  return axios\n    .get(`${URL}/movie/top_rated?api_key=${key}&page=${currentPage}`)\n    .then(response => response.data);\n}\n\nfunction fetchWaitingForTheMovies(currentPage = 1) {\n  return axios\n    .get(\n      `${URL}/movie/upcoming?api_key=${key}&primary_release_date.gte=${new Date()\n        .toISOString()\n        .slice(0, 10)}&page=${currentPage}`\n    )\n    .then(response => response.data);\n}\n\nconst apiTheMovieDB = {\n  fetchMoviesbyActors,\n  fetchActorInfoAndMovies,\n  fetchTrending,\n  fetchSearchMovie,\n  fetchMovieDetalis,\n  fetchMovieCredits,\n  fetchMovieReview,\n  fetchTrailerMovies,\n  fetchAllgenres,\n  fetchByGenre,\n  fetchActors,\n  fetchByYear,\n  fetchExpectedMovies,\n  fetchFilmsByRating,\n  fetchWaitingForTheMovies,\n};\n\nexport default apiTheMovieDB;\n"],"names":["CardWrapper","styled","ImgWrapper","MoviesImg","CardTitle","RatingStarsContainer","GoldStar","GrayStar","RatingText","RatingNumber","MoviesYear","red","css","yellow","green","RatingBlock","poster_path","title","vote_average","release_date","percentRating","goldStars","Math","floor","ratingStars","Array","from","length","_","i","ratingColor","getRatingColor","ratingClassName","src","alt","width","className","toFixed","slice","movies","location","useLocation","map","index","id","to","state","onSubmit","useState","query","setQuery","e","preventDefault","toast","name","value","type","autoComplete","placeholder","onChange","currentTarget","toLowerCase","trim","BtnLoadMore","hendleIncrement","onClick","selectedYear","setSelectedYear","setMovies","error","setError","loading","setLoading","page","setPage","showButton","setShowButton","useEffect","fetchMovies","apiTheMovieDB","newMovies","prevMovies","message","yearOptions","currentYear","Date","getFullYear","year","push","Container","htmlFor","classNamePrefix","label","selectedOption","options","menuPlacement","MoviesList","SearchByYear","navigate","useNavigate","currentPage","setCurrentPage","hasMore","setHasMore","useCallback","then","catch","URLSearchParams","search","get","newQuery","dataLength","next","loader","URL","key","fetchMoviesbyActors","axios","response","data","cast","fetchActorInfoAndMovies","fetchTrending","results","fetchSearchMovie","fetchMovieDetalis","fetchMovieCredits","fetchMovieReview","fetchTrailerMovies","movieId","fetchAllgenres","genres","fetchByGenre","fetchActors","url","fetchByYear","fetchExpectedMovies","fetchFilmsByRating","fetchWaitingForTheMovies","toISOString"],"sourceRoot":""}